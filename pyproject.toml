[build-system]
requires = ["setuptools", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

[project]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Science/Research",
  "License :: Public Domain",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
name = "nz_wreck_analysis"
description = "An analysis of shipwrecks in New Zealand."
authors = [
  { name = "Nathan McDougall", email = "nathan.j.mcdougall@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.8"
dynamic = ["version"]
dependencies = [
  "geopandas",
  "pandas",
  "pandera[geopandas,hypothesis]",
  "pydantic",
  "strenum",
]

[project.optional-dependencies]
dev = [
  "pip-tools>=7.0.0",
  "setuptools_scm[toml]",
  # These four need to be synced with the versions in .pre-commit-config.yaml
  # Also see the check section
  "black==23.7.0",
  "ruff==0.0.285",
  "doc8==1.1.1",
  # ^^^
]
check = [
  "pre-commit",
  "mypy==1.5.1", # Sync with the version in .pre-commit-config.yaml
]
test = ["pytest", "coverage[toml]", "pytest-cov"]
notebook = [
  "ipykernel",
  "ipython",
  "iprogress",
  "jupyter",
  "ipywidgets",
  "ydata-profiling",
  "folium",
  "matplotlib",
  "mapclassify",
]

[project.urls]
"Source Code" = "https://github.com/nathanjmcdougall/nz_wreck_analysis"
"homepage" = "https://github.com/nathanjmcdougall/nz_wreck_analysis"
"Bug Tracker" = "https://github.com/nathanjmcdougall/nz_wreck_analysis/issues"

[tool.setuptools_scm]
write_to = "src/nz_wreck_analysis/_version.py"

[tool.setuptools]
package-dir = { "" = "src" }
packages = ["nz_wreck_analysis"]
license-files = ["LICENSE"]

[tool.distutils.bdist_wheel]
universal = true

[tool.mypy]
allow_subclassing_any = true
strict = true
exclude = ['tests/', 'doc/']
mypy_path = ["src"]

[tool.ruff]
src = ["src"]
select = ["ALL"]
ignore = [
  "D203", # Conflicts with other rule
  "D212", # Conflicts with other rule
  "D204", # Bad rule
  "D100", # Too much
]
line-length = 88 # Sync with black, doc8
target-version = "py311"

[tool.ruff.per-file-ignores]
"**/__init__.py" = [
  "D104", # No docstrings required in empty __init__.py files.
]
"src/scripts/**/*.py" = [
  "INP001", # No need for __init__.py files in the scripts folder.
]

[tool.black]
line-length = 88 # Sync with ruff
target-version = ['py38', 'py39', 'py310', 'py311']
exclude = '''
(
  \.git
  | \.venv
  | setup.py
)
'''

[tool.doc8]
max-line-length = 88 # sync with ruff

[tool.pytest]
console_output_style = ['progress']

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]

[tool.coverage.report]
ignore_errors = true
show_missing = true
exclude_lines = [
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  "AbstractMethodError",
  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if 0:",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",
  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
]
